type Vehicle {
id: ID!,
type: String,
modelCode: String,
brandName: String,
launchDate: String
}

type CompositeOutputVO {
id: ID!,
type: String,
modelCode: String,
brandName: String,
launchDate: String,
insuredBy: String,
insuredOn: String
}

input QueryArgument {
columnName: String!
operator: String!
value: String!
}

type Query {
vehicles(count: Int):[Vehicle]
vehicle(id: ID):Vehicle
composites(brandName: String):[CompositeOutputVO]
compositeWithArgs(brandNames: [String]):[CompositeOutputVO]
compositeWithQueryArguments(queryArguments: [QueryArgument]):[CompositeOutputVO]
}

type Mutation {
createVehicle(type: String!, modelCode: String!, brandName: String, launchDate: String):Vehicle
}